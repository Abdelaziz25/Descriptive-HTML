/* valdting.java */
/* Generated By:JavaCC: Do not edit this line. valdting.java */
/** Simple brace matcher. */
public class valdting implements valdtingConstants {
    /** Main entry point. */
    public static void main(String args[]) throws ParseException {
        valdting parser = new valdting(System.in);
        parser.Input();
    }

  static final public String Input() throws ParseException {Token t ;
   String s;
   String k="";
   String[] x  ;
   String result ="";
   String msg ="";
   boolean flag = false;
   String name = "";
   String remove="";
   String styling="";
   int num;
   String answer="";
    label_1:
    while (true) {
      t = jj_consume_token(create);
s=t.toString();
      if(s.contains("IMAGE"))
      {
         k= s.substring(22);
          System.out.println("<img src="+k +"/>");

           answer="<img src="+k +"/>";
           k="";
      }
      else if(s.contains("HEADING") || s.contains("PARAGRAPH"))
      {
           x  = s.split(" ");
         for(int i=0;i<x.length;i++){
                    if(x[i].equalsIgnoreCase("HEADING")){
                        result += "<h1";
                        name = "HEADING";
                    }
                    if(x[i].equalsIgnoreCase("PARAGRAPH")){
                        result += "<p";
                        name = "PARAGRAPH";
                    }
                    else if(x[i].equalsIgnoreCase("FONT")){
                        if(!flag  )
                        {
                                flag=true;
                            result +=" style="+"\"";
                        }
                        String temp = x[i+1].substring(1, x[i+1].length() - 1);
                        result += "font-family:"+temp+";";
                    }
                    else if(x[i].equalsIgnoreCase("COLOR")){
                        if(!flag)
                        {
                             result +=" style="+"\"";
                             flag=true;
                        }
                       String temp = x[i+1].substring(1, x[i+1].length() - 1);
                        result += "color:"+temp+";";
                    }
                    else if (x[i].equalsIgnoreCase("TEXT")) {
                        int j = i+1;

                        while (j < x.length && !x[j].equalsIgnoreCase("AND")) {
                            msg += x[j] + " ";
                            j++;
                        }
                    }
                }
                msg = msg.substring(1, msg.length() - 2);
             if(name.equalsIgnoreCase("HEADING"))
             {
                        if (flag)
                            result += "\"";
                        result += ">" + msg + "</h1>";
             }
             else if(name.equalsIgnoreCase("PARAGRAPH"))
             {
                        if (flag)
                            result += "\"";
                        result += ">" + msg + "</p>";
                    }
                System.out.println(result);
                answer=result;
                result="";
                msg="";
      }
      else
      {
          x = s.split(" ");
          result += "<a";
          for(int i=2;i<x.length;i++){
              if(x[i].equalsIgnoreCase("LINK"))
              {
                 result+=" href="+x[i+1] ;
              }
              else if(x[i].equalsIgnoreCase("TEXT"))
              {
                  msg=x[i+1];
                  msg=msg.replace("\"","");
              }

              else if(x[i].equalsIgnoreCase("FONT"))
              {
                 if(!flag)
                 {
                   flag=true;
                   styling +=" style=";
                   remove=x[i+1].replace("\"","");
                   styling+= '"' +" font-family:"+remove +";"+'"';
                   remove="";
                 }
                 else
                 {
                      num=styling.length();
                      styling=styling.substring(0,num-1);
                     remove=x[i+1].replace("\"","");
                     styling+= "font-family:"+remove+";"+'"';
                     remove="";
                 }
              }
              else if(x[i].equalsIgnoreCase("COLOR"))
              {
                   if(flag==false)
                   {
                       flag=true;
                      styling +=" style=";
                      remove=x[i+1].replace("\"","");
                      styling+= '"' +"color:"+remove +";"+'"';
                      remove="";
                   }
                   else
                   {
                        num=styling.length();
                        styling=styling.substring(0,num-1);
                        remove=x[i+1].replace("\"","");
                        styling+= " color:"+remove+";"+'"';
                        remove="";
                   }
              }
          }
          result+=styling;
          System.out.println(result+'>'+msg+"</a>");
          answer=result+'>'+msg+"</a>";
          result="";
          msg="";
          styling="";
          num=0;
          flag=false;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case create:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
{if ("" != null) return answer;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public valdtingTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[1];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x800000,};
	}

  /** Constructor with InputStream. */
  public valdting(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public valdting(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new valdtingTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public valdting(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new valdtingTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new valdtingTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public valdting(valdtingTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(valdtingTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[31];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 1; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 31; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
