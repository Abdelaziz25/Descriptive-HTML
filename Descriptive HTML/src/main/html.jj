
PARSER_BEGIN(valdting)
/** Simple brace matcher. */
public class valdting {
    /** Main entry point. */
    public static void main(String args[]) throws ParseException {
        valdting parser = new valdting(System.in);
        parser.Input();
    }
}
    PARSER_END(valdting)
    TOKEN : {< ADD : "ADD">}
    TOKEN : {< AND : "AND">}
    TOKEN : {< WITH : "WITH">}
    TOKEN : {<SOURCE:"SOURCE">}
    TOKEN : {<TEXT:"TEXT">}
    TOKEN : {<SPACE:" ">}
    TOKEN : {<FONT:"FONT">}
    TOKEN : {<COLOR:"COLOR">}
    TOKEN : {<#IMAGE:"IMAGE">}
    TOKEN : {<#HEADING:"HEADING">}
    TOKEN : {<LINK:"LINK">}
    TOKEN : {<space:<SPACE> <AND> <SPACE> >}
    TOKEN : {<#PARAGRAPH:"PARAGRAPH">}
    TOKEN : {<para: <PARAGRAPH> <SPACE> <DTEXT>>}
    TOKEN : {<header: <HEADING> <SPACE> <DTEXT> >}
    TOKEN : {<url: <LINK> <SPACE> <DTEXT>>}
    TOKEN : {<img: <IMAGE> <SPACE> <WITH> <SPACE> <SOURCE> <SPACE> <quote> <sentence> <quote> >}
    TOKEN : {<color: <WITH> <SPACE> <COLOR> <SPACE> <quote> <sentence> <quote>>}
    TOKEN : {<font: <WITH> <SPACE> <FONT> <SPACE> <quote> <sentence> <quote>>}
    TOKEN : {<text: <WITH> <SPACE> <TEXT> <SPACE> <quote> <sentence> <quote>>}
    TOKEN : {<link: <WITH> <SPACE> <LINK> <SPACE> <quote> <sentence> <quote>>}
    TOKEN : {<element: <img> | <header> |<para> | <url> >}
    TOKEN : {<create: <ADD> <SPACE> <element> >}
    TOKEN : {<#quote:"\"">}
    TOKEN : {<sentence: (<ALPHANUMERIC>)+ >}
    TOKEN : {< DTEXT : (<font> | <color> |<text> |<link> )  (((<SPACE> |<space>) (<font> | <color> |<text> |<link>)))* >}
    TOKEN : { < ALPHANUMERIC : (["a"-"z","A"-"Z","0"-"9","/",":","."])+>}
    SKIP : {"\n" | "\t" | "\r" }
    /** Root production. */
public String Input() :
{
   Token t ;
   String s;
   String k="";
   String[] x  ;
   String result ="";
   String msg ="";
   boolean flag = false;
   String name = "";
   String remove="";
   String styling="";
   int num;
   String answer="";
 }
{
     (t=<create>{

      s=t.toString();
      if(s.contains("IMAGE"))
      {
         k= s.substring(22);
          System.out.println("<img src="+k +"/>");

           answer="<img src="+k +"/>";
           k="";
      }
      else if(s.contains("HEADING") || s.contains("PARAGRAPH"))
      {
           x  = s.split(" ");
         for(int i=0;i<x.length;i++){
                    if(x[i].equalsIgnoreCase("HEADING")){
                        result += "<h1";
                        name = "HEADING";
                    }
                    if(x[i].equalsIgnoreCase("PARAGRAPH")){
                        result += "<p";
                        name = "PARAGRAPH";
                    }
                    else if(x[i].equalsIgnoreCase("FONT")){
                        if(!flag  )
                        {
                                flag=true;
                            result +=" style="+"\"";
                        }
                        String temp = x[i+1].substring(1, x[i+1].length() - 1);
                        result += "font-family:"+temp+";";
                    }
                    else if(x[i].equalsIgnoreCase("COLOR")){
                        if(!flag)
                        {
                             result +=" style="+"\"";
                             flag=true;
                        }
                       String temp = x[i+1].substring(1, x[i+1].length() - 1);
                        result += "color:"+temp+";";
                    }
                    else if (x[i].equalsIgnoreCase("TEXT")) {
                        int j = i+1;

                        while (j < x.length && !x[j].equalsIgnoreCase("AND")) {
                            msg += x[j] + " ";
                            j++;
                        }
                    }
                }
                msg = msg.substring(1, msg.length() - 2);
             if(name.equalsIgnoreCase("HEADING"))
             {
                        if (flag)
                            result += "\"";
                        result += ">" + msg + "</h1>";
             }
             else if(name.equalsIgnoreCase("PARAGRAPH"))
             {
                        if (flag)
                            result += "\"";
                        result += ">" + msg + "</p>";
                    }
                System.out.println(result);
                answer=result;
                result="";
                msg="";
      }
      else
      {
          x = s.split(" ");
          result += "<a";
          for(int i=2;i<x.length;i++){
              if(x[i].equalsIgnoreCase("LINK"))
              {
                 result+=" href="+x[i+1] ;
              }
              else if(x[i].equalsIgnoreCase("TEXT"))
              {
                  msg=x[i+1];
                  msg=msg.replace("\"","");
              }

              else if(x[i].equalsIgnoreCase("FONT"))
              {
                 if(!flag)
                 {
                   flag=true;
                   styling +=" style=";
                   remove=x[i+1].replace("\"","");
                   styling+= '"' +" font-family:"+remove +";"+'"';
                   remove="";
                 }
                 else
                 {
                      num=styling.length();
                      styling=styling.substring(0,num-1);
                     remove=x[i+1].replace("\"","");
                     styling+= "font-family:"+remove+";"+'"';
                     remove="";
                 }
              }
              else if(x[i].equalsIgnoreCase("COLOR"))
              {
                   if(flag==false)
                   {
                       flag=true;
                      styling +=" style=";
                      remove=x[i+1].replace("\"","");
                      styling+= '"' +"color:"+remove +";"+'"';
                      remove="";
                   }
                   else
                   {
                        num=styling.length();
                        styling=styling.substring(0,num-1);
                        remove=x[i+1].replace("\"","");
                        styling+= " color:"+remove+";"+'"';
                        remove="";
                   }
              }
          }
          result+=styling;
          System.out.println(result+'>'+msg+"</a>");
          answer=result+'>'+msg+"</a>";
          result="";
          msg="";
          styling="";
          num=0;
          flag=false;
      }

})+
       <EOF>
       {
 return answer;
       }
}



/** Brace matching production. */
